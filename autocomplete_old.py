#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Aug 23, 2020 09:33:02 PM IST  platform: Windows NT

import sys
from tkinter import *
# from tkinter import ttk 
# import tkinter as tk 


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import file2_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    file2_support.set_Tk_var()
    top = Toplevel1 (root)
    file2_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    file2_support.set_Tk_var()
    top = Toplevel1 (w)
    file2_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None



class MultiListbox(Frame):
    def __init__(self, master, lists):
        Frame.__init__(self, master)
        self.lists = []
        for l,w in lists:
            frame = Frame(self); frame.pack(side=LEFT, expand=YES, fill=BOTH)
            Label(frame, text=l, borderwidth=1, relief=RAISED).pack(fill=X)
            lb = Listbox(frame, width=w, borderwidth=0, selectborderwidth=0,
                         relief=FLAT, exportselection=FALSE)
            lb.pack(expand=YES, fill=BOTH)
            self.lists.append(lb)
            lb.bind('<B1-Motion>', lambda e, s=self: s._select(e.y))
            lb.bind('<Button-1>', lambda e, s=self: s._select(e.y))
            lb.bind('<Leave>', lambda e: 'break')
            lb.bind('<B2-Motion>', lambda e, s=self: s._b2motion(e.x, e.y))
            lb.bind('<Button-2>', lambda e, s=self: s._button2(e.x, e.y))
        frame = Frame(self); frame.pack(side=LEFT, fill=Y)
        Label(frame, borderwidth=1, relief=RAISED).pack(fill=X)
        sb = Scrollbar(frame, orient=VERTICAL, command=self._scroll)
        sb.pack(expand=YES, fill=Y)
        self.lists[0]['yscrollcommand']=sb.set

    def _select(self, y):
        row = self.lists[0].nearest(y)
        self.selection_clear(0, END)
        self.selection_set(row)
        return 'break'

    def _button2(self, x, y):
        for l in self.lists: l.scan_mark(x, y)
        return 'break'

    def _b2motion(self, x, y):
        for l in self.lists: l.scan_dragto(x, y)
        return 'break'

    def _scroll(self, *args):
        for l in self.lists:
            apply(l.yview, args)

    def curselection(self):
        return self.lists[0].curselection(  )

    def delete(self, first, last=None):
        for l in self.lists:
            l.delete(first, last)

    def get(self, first, last=None):
        result = []
        for l in self.lists:
            result.append(l.get(first,last))
        if last: return apply(map, [None] + result)
        return result

    def index(self, index):
        self.lists[0].index(index)

    def insert(self, index, *elements):
        for e in elements:
            i = 0
            for l in self.lists:
                l.insert(index, e[i])
                i = i + 1

    def size(self):
        return self.lists[0].size(  )

    def see(self, index):
        for l in self.lists:
            l.see(index)

    def selection_anchor(self, index):
        for l in self.lists:
            l.selection_anchor(index)

    def selection_clear(self, first, last=None):
        for l in self.lists:
            l.selection_clear(first, last)

    def selection_includes(self, index):
        return self.lists[0].selection_includes(index)

    def selection_set(self, first, last=None):
        for l in self.lists:
            l.selection_set(first, last)

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Segoe UI} -size 13 -weight bold"
        font11 = "-family {Segoe UI} -size 10 -weight bold"
        font9 = "-family {Segoe UI} -size 10"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("850x650+285+88")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1, 1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.012, rely=0.015, relheight=1.037
                , relwidth=0.982)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.fra46_lab47 = tk.Label(self.Frame1)
        self.fra46_lab47.place(relx=0.012, rely=0.016, height=34, width=81)
        self.fra46_lab47.configure(activebackground="#f9f9f9")
        self.fra46_lab47.configure(activeforeground="black")
        self.fra46_lab47.configure(background="#d9d9d9")
        self.fra46_lab47.configure(disabledforeground="#a3a3a3")
        self.fra46_lab47.configure(font="-family {Segoe UI} -size 13 -weight normal -slant roman -underline 0 -overstrike 0")
        self.fra46_lab47.configure(foreground="#000000")
        self.fra46_lab47.configure(highlightbackground="#004040")
        self.fra46_lab47.configure(highlightcolor="black")
        self.fra46_lab47.configure(text='''Vehicle #''')

        self.Text1 = tk.Text(self.Frame1)
        self.Text1.place(relx=0.12, rely=0.013, relheight=0.062, relwidth=0.352)
        self.Text1.configure(background="white")
        self.Text1.configure(font="-family {Segoe UI} -size 13")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="black")
        self.Text1.configure(insertbackground="black")
        self.Text1.configure(selectbackground="blue")
        self.Text1.configure(selectforeground="white")
        self.Text1.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.Text1_tooltip = \
        ToolTip(self.Text1, self.tooltip_font, '''Enter vehicle Number''')

        self.fra46_lab49 = tk.Label(self.Frame1)
        self.fra46_lab49.place(relx=0.471, rely=0.016, height=34, width=82)
        self.fra46_lab49.configure(activebackground="#f9f9f9")
        self.fra46_lab49.configure(activeforeground="black")
        self.fra46_lab49.configure(background="#d9d9d9")
        self.fra46_lab49.configure(disabledforeground="#a3a3a3")
        self.fra46_lab49.configure(font="-family {Segoe UI} -size 13 -weight normal -slant roman -underline 0 -overstrike 0")
        self.fra46_lab49.configure(foreground="#000000")
        self.fra46_lab49.configure(highlightbackground="#004040")
        self.fra46_lab49.configure(highlightcolor="black")
        self.fra46_lab49.configure(text='''Mobile #''')

        self.fra46_tex51 = tk.Text(self.Frame1)
        self.fra46_tex51.place(relx=0.571, rely=0.016, relheight=0.065
                , relwidth=0.351)
        self.fra46_tex51.configure(background="white")
        self.fra46_tex51.configure(font="-family {Segoe UI} -size 13")
        self.fra46_tex51.configure(foreground="black")
        self.fra46_tex51.configure(highlightbackground="#d9d9d9")
        self.fra46_tex51.configure(highlightcolor="black")
        self.fra46_tex51.configure(insertbackground="black")
        self.fra46_tex51.configure(selectbackground="blue")
        self.fra46_tex51.configure(selectforeground="white")
        self.fra46_tex51.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.fra46_tex51_tooltip = \
        ToolTip(self.fra46_tex51, self.tooltip_font, '''Enter mobile Number''')

        self.Button1 = tk.Button(self.Frame1)
        self.Button1.place(relx=0.931, rely=0.016, height=34, width=47)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Find''')
        self.tooltip_font = "TkDefaultFont"
        self.Button1_tooltip = \
        ToolTip(self.Button1, self.tooltip_font, '''Click to find vehicle info''')

        self.findvehicle = tk.Frame(self.Frame1)
        self.findvehicle.place(relx=0.0, rely=0.096, relheight=0.074
                , relwidth=1.0)
        self.findvehicle.configure(relief='groove')
        self.findvehicle.configure(borderwidth="2")
        self.findvehicle.configure(relief="groove")
        self.findvehicle.configure(background="#d9d9d9")
        self.findvehicle.configure(highlightbackground="#d9d9d9")
        self.findvehicle.configure(highlightcolor="black")

        self.TButton1_4 = ttk.Button(self.findvehicle)
        self.TButton1_4.place(relx=0.248, rely=0.24, height=25, width=166)
        self.TButton1_4.configure(takefocus="")
        self.TButton1_4.configure(text='''Modify Last Bill''')

        self.fra46_fra58_lab62 = tk.Label(self.findvehicle)
        self.fra46_fra58_lab62.place(relx=0.459, rely=0.2, height=19, width=82)
        self.fra46_fra58_lab62.configure(activebackground="#f9f9f9")
        self.fra46_fra58_lab62.configure(activeforeground="black")
        self.fra46_fra58_lab62.configure(background="#d9d9d9")
        self.fra46_fra58_lab62.configure(disabledforeground="#a3a3a3")
        self.fra46_fra58_lab62.configure(font="-family {Segoe UI} -size 12 -weight normal -slant roman -underline 0 -overstrike 0")
        self.fra46_fra58_lab62.configure(foreground="#000000")
        self.fra46_fra58_lab62.configure(highlightbackground="#004040")
        self.fra46_fra58_lab62.configure(highlightcolor="black")
        self.fra46_fra58_lab62.configure(text='''Bill #''')

        self.fra46_fra58_lab63 = tk.Label(self.findvehicle)
        self.fra46_fra58_lab63.place(relx=0.583, rely=0.2, height=23, width=279)
        self.fra46_fra58_lab63.configure(activebackground="#f9f9f9")
        self.fra46_fra58_lab63.configure(activeforeground="black")
        self.fra46_fra58_lab63.configure(background="#d9d9d9")
        self.fra46_fra58_lab63.configure(disabledforeground="#a3a3a3")
        self.fra46_fra58_lab63.configure(font="-family {Segoe UI} -size 13 -weight normal -slant roman -underline 0 -overstrike 0")
        self.fra46_fra58_lab63.configure(foreground="#000000")
        self.fra46_fra58_lab63.configure(highlightbackground="#004040")
        self.fra46_fra58_lab63.configure(highlightcolor="black")
        self.fra46_fra58_lab63.configure(text='''Bill Number''')

        self.TButton1_3 = ttk.Button(self.Frame1)
        self.TButton1_3.place(relx=0.025, rely=0.111, height=25, width=166)
        self.TButton1_3.configure(takefocus="")
        self.TButton1_3.configure(text='''New Bill''')

        self.Frame2 = tk.Frame(self.Frame1)
        self.Frame2.place(relx=0.0, rely=0.163, relheight=0.172, relwidth=1.0)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(cursor="fleur")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame2)
        self.Label1.place(relx=0.012, rely=0.069, height=16, width=107)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Customer Name''')

        self.Text2 = tk.Text(self.Frame2)
        self.Text2.place(relx=0.149, rely=0.069, relheight=0.164, relwidth=0.515)

        self.Text2.configure(background="white")
        self.Text2.configure(font=font9)
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="black")
        self.Text2.configure(insertbackground="black")
        self.Text2.configure(selectbackground="blue")
        self.Text2.configure(selectforeground="white")
        self.Text2.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.Text2_tooltip = \
        ToolTip(self.Text2, self.tooltip_font, '''Enter customer name''')

        self.Label1_6 = tk.Label(self.Frame2)
        self.Label1_6.place(relx=0.012, rely=0.276, height=16, width=107)
        self.Label1_6.configure(activebackground="#f9f9f9")
        self.Label1_6.configure(activeforeground="black")
        self.Label1_6.configure(background="#d9d9d9")
        self.Label1_6.configure(disabledforeground="#a3a3a3")
        self.Label1_6.configure(font="-family {Segoe UI} -size 10 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label1_6.configure(foreground="#000000")
        self.Label1_6.configure(highlightbackground="#d9d9d9")
        self.Label1_6.configure(highlightcolor="black")
        self.Label1_6.configure(text='''Address''')

        self.Text2_7 = tk.Text(self.Frame2)
        self.Text2_7.place(relx=0.149, rely=0.259, relheight=0.319
                , relwidth=0.515)
        self.Text2_7.configure(background="white")
        self.Text2_7.configure(font="-family {Segoe UI} -size 10")
        self.Text2_7.configure(foreground="black")
        self.Text2_7.configure(highlightbackground="#d9d9d9")
        self.Text2_7.configure(highlightcolor="black")
        self.Text2_7.configure(insertbackground="black")
        self.Text2_7.configure(selectbackground="blue")
        self.Text2_7.configure(selectforeground="white")
        self.Text2_7.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.Text2_7_tooltip = \
        ToolTip(self.Text2_7, self.tooltip_font, '''Enter customer address''')

        self.Label1_7 = tk.Label(self.Frame2)
        self.Label1_7.place(relx=0.012, rely=0.526, height=17, width=107)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#d9d9d9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font="-family {Segoe UI} -size 10 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#d9d9d9")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Vehicle Info''')

        self.Text2_8 = tk.Text(self.Frame2)
        self.Text2_8.place(relx=0.149, rely=0.595, relheight=0.233
                , relwidth=0.515)
        self.Text2_8.configure(background="white")
        self.Text2_8.configure(font="-family {Segoe UI} -size 10")
        self.Text2_8.configure(foreground="black")
        self.Text2_8.configure(highlightbackground="#d9d9d9")
        self.Text2_8.configure(highlightcolor="black")
        self.Text2_8.configure(insertbackground="black")
        self.Text2_8.configure(selectbackground="blue")
        self.Text2_8.configure(selectforeground="white")
        self.Text2_8.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.Text2_8_tooltip = \
        ToolTip(self.Text2_8, self.tooltip_font, '''Vehicle Information''')

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=0.012, rely=0.341, height=21, width=47)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(cursor="fleur")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''SlNo''')

        self.Label2_9 = tk.Label(self.Frame1)
        self.Label2_9.place(relx=0.062, rely=0.341, height=21, width=149)
        self.Label2_9.configure(activebackground="#f9f9f9")
        self.Label2_9.configure(activeforeground="black")
        self.Label2_9.configure(background="#d9d9d9")
        self.Label2_9.configure(disabledforeground="#a3a3a3")
        self.Label2_9.configure(foreground="#000000")
        self.Label2_9.configure(highlightbackground="#d9d9d9")
        self.Label2_9.configure(highlightcolor="black")
        self.Label2_9.configure(text='''Item''')

        self.Label2_10 = tk.Label(self.Frame1)
        self.Label2_10.place(relx=0.534, rely=0.341, height=21, width=56)
        self.Label2_10.configure(activebackground="#f9f9f9")
        self.Label2_10.configure(activeforeground="black")
        self.Label2_10.configure(background="#d9d9d9")
        self.Label2_10.configure(disabledforeground="#a3a3a3")
        self.Label2_10.configure(foreground="#000000")
        self.Label2_10.configure(highlightbackground="#d9d9d9")
        self.Label2_10.configure(highlightcolor="black")
        self.Label2_10.configure(text='''UOM''')

        self.Label2_11 = tk.Label(self.Frame1)
        self.Label2_11.place(relx=0.646, rely=0.341, height=21, width=56)
        self.Label2_11.configure(activebackground="#f9f9f9")
        self.Label2_11.configure(activeforeground="black")
        self.Label2_11.configure(background="#d9d9d9")
        self.Label2_11.configure(disabledforeground="#a3a3a3")
        self.Label2_11.configure(foreground="#000000")
        self.Label2_11.configure(highlightbackground="#d9d9d9")
        self.Label2_11.configure(highlightcolor="black")
        self.Label2_11.configure(text='''Qty''')

        self.Label2_12 = tk.Label(self.Frame1)
        self.Label2_12.place(relx=0.745, rely=0.341, height=21, width=56)
        self.Label2_12.configure(activebackground="#f9f9f9")
        self.Label2_12.configure(activeforeground="black")
        self.Label2_12.configure(background="#d9d9d9")
        self.Label2_12.configure(disabledforeground="#a3a3a3")
        self.Label2_12.configure(foreground="#000000")
        self.Label2_12.configure(highlightbackground="#d9d9d9")
        self.Label2_12.configure(highlightcolor="black")
        self.Label2_12.configure(text='''Price''')

        self.Label2_13 = tk.Label(self.Frame1)
        self.Label2_13.place(relx=0.846, rely=0.341, height=21, width=56)
        self.Label2_13.configure(activebackground="#f9f9f9")
        self.Label2_13.configure(activeforeground="black")
        self.Label2_13.configure(background="#d9d9d9")
        self.Label2_13.configure(disabledforeground="#a3a3a3")
        self.Label2_13.configure(foreground="#000000")
        self.Label2_13.configure(highlightbackground="#d9d9d9")
        self.Label2_13.configure(highlightcolor="black")
        self.Label2_13.configure(text='''Total''')

        self.TCombobox1 = ttk.Combobox(self.Frame1)
        self.TCombobox1.place(relx=0.062, rely=0.386, relheight=0.031
                , relwidth=0.462)
        self.TCombobox1.configure(textvariable=file2_support.combobox)
        self.TCombobox1.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.TCombobox1_tooltip = \
        ToolTip(self.TCombobox1, self.tooltip_font, '''Select / Enter  item''')

        self.Label2_14 = tk.Label(self.Frame1)
        self.Label2_14.place(relx=0.012, rely=0.386, height=21, width=34)
        self.Label2_14.configure(activebackground="#f9f9f9")
        self.Label2_14.configure(activeforeground="black")
        self.Label2_14.configure(background="#d9d9d9")
        self.Label2_14.configure(disabledforeground="#a3a3a3")
        self.Label2_14.configure(foreground="#000000")
        self.Label2_14.configure(highlightbackground="#d9d9d9")
        self.Label2_14.configure(highlightcolor="black")
        self.Label2_14.configure(text='''SlNo''')

        self.Text3_15 = tk.Text(self.Frame1)
        self.Text3_15.place(relx=0.657, rely=0.386, relheight=0.036
                , relwidth=0.081)
        self.Text3_15.configure(background="white")
        self.Text3_15.configure(font="TkTextFont")
        self.Text3_15.configure(foreground="black")
        self.Text3_15.configure(highlightbackground="#d9d9d9")
        self.Text3_15.configure(highlightcolor="black")
        self.Text3_15.configure(insertbackground="black")
        self.Text3_15.configure(selectbackground="blue")
        self.Text3_15.configure(selectforeground="white")
        self.Text3_15.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.Text3_15_tooltip = \
        ToolTip(self.Text3_15, self.tooltip_font, '''Enter item Quantity''')

        self.Text3_16 = tk.Text(self.Frame1)
        self.Text3_16.place(relx=0.745, rely=0.386, relheight=0.036
                , relwidth=0.093)
        self.Text3_16.configure(background="white")
        self.Text3_16.configure(font="TkTextFont")
        self.Text3_16.configure(foreground="black")
        self.Text3_16.configure(highlightbackground="#d9d9d9")
        self.Text3_16.configure(highlightcolor="black")
        self.Text3_16.configure(insertbackground="black")
        self.Text3_16.configure(selectbackground="blue")
        self.Text3_16.configure(selectforeground="white")
        self.Text3_16.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.Text3_16_tooltip = \
        ToolTip(self.Text3_16, self.tooltip_font, '''Price''')

        self.Text3_17 = tk.Text(self.Frame1)
        self.Text3_17.place(relx=0.846, rely=0.386, relheight=0.036
                , relwidth=0.107)
        self.Text3_17.configure(background="white")
        self.Text3_17.configure(font="TkTextFont")
        self.Text3_17.configure(foreground="black")
        self.Text3_17.configure(highlightbackground="#d9d9d9")
        self.Text3_17.configure(highlightcolor="black")
        self.Text3_17.configure(insertbackground="black")
        self.Text3_17.configure(selectbackground="blue")
        self.Text3_17.configure(selectforeground="white")
        self.Text3_17.configure(wrap="word")

        self.TCombobox1_18 = ttk.Combobox(self.Frame1)
        self.TCombobox1_18.place(relx=0.534, rely=0.386, relheight=0.031
                , relwidth=0.113)
        self.TCombobox1_18.configure(textvariable=file2_support.combobox)
        self.TCombobox1_18.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.TCombobox1_18_tooltip = \
        ToolTip(self.TCombobox1_18, self.tooltip_font, '''Select UOM''')

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(relx=0.957, rely=0.386, height=24, width=27)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font=font10)
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''+''')
        self.tooltip_font = "TkDefaultFont"
        self.Button2_tooltip = \
        ToolTip(self.Button2, self.tooltip_font, '''Save''')

        self.Button3 = tk.Button(self.Frame1)
        self.Button3.place(relx=0.874, rely=0.831, height=24, width=42)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(font=font11)
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(text='''Print''')
       
        # self.Listbox1 = tk.Listbox(self.Frame1)
        # self.Listbox1.place(relx=0.0, rely=0.43, relheight=0.374, relwidth=0.999)
        # self.Listbox1.configure(background="white")
        # self.Listbox1.configure(disabledforeground="#a3a3a3")
        # self.Listbox1.configure(font="TkFixedFont")
        # self.Listbox1.configure(foreground="#000000")

        

        self.treev = ttk.Treeview(self.Frame1, selectmode ='browse') 

        # Calling pack method w.r.to treeview       
        self.treev.place(relx=0.0, rely=0.43, relheight=0.374, relwidth=0.999)

        # Constructing vertical scrollbar 
        # with treeview 
        self.verscrlbar = ttk.Scrollbar(self.Frame1, 
                                orient ="vertical", 
                                command = self.treev.yview) 

        # Calling pack method w.r.to verical 
        # scrollbar 
        #self.verscrlbar.pack(side ='right', fill ='x') 
        #self.verscrlbar.place(relx=0.8, rely=0.43, relheight=0.374, relwidth=0.999) 

        # Configuring treeview 
        self.treev.configure(xscrollcommand = self.verscrlbar.set) 

        # Defining number of columns 
        self.treev["columns"] = ("1", "2", "3") 

        # Defining heading 
        self.treev['show'] = 'headings'

        # Assigning the width and anchor to the 
        # respective columns 
        self.treev.column("1", width = 90, anchor ='c') 
        self.treev.column("2", width = 90, anchor ='se') 
        self.treev.column("3", width = 90, anchor ='se') 

        # Assigning the heading names to the 
        # respective columns 
        self.treev.heading("1", text ="Name") 
        self.treev.heading("2", text ="Sex") 
        self.treev.heading("3", text ="Age") 

        # Inserting the items and their features to the 
        # columns built 
        self.treev.insert("", 'end', text ="L1", 
                    values =("Nidhi", "F", "25")) 
        self.treev.insert("", 'end', text ="L2", 
                    values =("Nisha", "F", "23")) 
        self.treev.insert("", 'end', text ="L3", 
                    values =("Preeti", "F", "27")) 
        self.treev.insert("", 'end', text ="L4", 
                    values =("Rahul", "M", "20")) 
        self.treev.insert("", 'end', text ="L5", 
                    values =("Sonu", "F", "18")) 
        self.treev.insert("", 'end', text ="L6", 
                    values =("Rohit", "M", "19")) 
        self.treev.insert("", 'end', text ="L7", 
                    values =("Geeta", "F", "25")) 
        self.treev.insert("", 'end', text ="L8", 
                    values =("Ankit", "M", "22")) 
        self.treev.insert("", 'end', text ="L10", 
                    values =("Mukul", "F", "25")) 
        self.treev.insert("", 'end', text ="L11", 
                    values =("Mohit", "M", "16")) 
        self.treev.insert("", 'end', text ="L12", 
                    values =("Vivek", "M", "22")) 
        self.treev.insert("", 'end', text ="L13", 
                    values =("Suman", "F", "30")) 

        for i in range(20):
            self.treev.insert("", 'end', text ="L13" + str(i),values =("Suman", "F", "30")) 


        #self.Listbox1 = MultiListbox(self.Frame1, (('Subject', 40), ('Sender', 20), ('Date', 10)))
        #self.Listbox1.place(relx=0.0, rely=0.43, relheight=0.374, relwidth=0.999)
        # self.Listbox1.configure(background="white")
        # self.Listbox1.configure(disabledforeground="#a3a3a3")
        # self.Listbox1.configure(font="TkFixedFont")
        # self.Listbox1.configure(foreground="#000000")

        #for i in range(1000):
            #self.Listbox1.insert(END,('Important Message: %d' % i, 'John Doe', '10/10/%04d' % (1900+i)))
        #mlb.pack(expand=YES,fill=BOTH)


    def addItem():
        pass

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime


class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





