#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.4
#  in conjunction with Tcl version 8.6
#    Sep 05, 2020 09:02:52 PM IST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import psv_support
from actions import *

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    psv_support.set_Tk_var()
    top = Toplevel1 (root)
    updateUIAttributes(top, root)
    psv_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    psv_support.set_Tk_var()
    top = Toplevel1 (w)
    psv_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("850x650+293+27")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1, 1)
        top.title("PSP CarCare")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.012, rely=0.015, relheight=1.037
                , relwidth=0.982)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.fra46_lab47 = tk.Label(self.Frame1)
        self.fra46_lab47.place(relx=0.012, rely=0.016, height=34, width=81)
        self.fra46_lab47.configure(activebackground="#f9f9f9")
        self.fra46_lab47.configure(activeforeground="black")
        self.fra46_lab47.configure(background="#d9d9d9")
        self.fra46_lab47.configure(disabledforeground="#a3a3a3")
        self.fra46_lab47.configure(font="-family {Segoe UI} -size 13 -weight normal -slant roman -underline 0 -overstrike 0")
        self.fra46_lab47.configure(foreground="#000000")
        self.fra46_lab47.configure(highlightbackground="#004040")
        self.fra46_lab47.configure(highlightcolor="black")
        self.fra46_lab47.configure(text='''Vehicle #''')

        self.txtvehicleno = tk.Text(self.Frame1)
        self.txtvehicleno.place(relx=0.12, rely=0.013, relheight=0.062
                , relwidth=0.352)
        self.txtvehicleno.configure(background="white")
        self.txtvehicleno.configure(font="-family {Segoe UI} -size 13")
        self.txtvehicleno.configure(foreground="black")
        self.txtvehicleno.configure(highlightbackground="#d9d9d9")
        self.txtvehicleno.configure(highlightcolor="black")
        self.txtvehicleno.configure(insertbackground="black")
        self.txtvehicleno.configure(selectbackground="blue")
        self.txtvehicleno.configure(selectforeground="white")
        self.txtvehicleno.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.txtvehicleno_tooltip = \
        ToolTip(self.txtvehicleno, self.tooltip_font, '''Enter vehicle Number''')

        self.fra46_lab49 = tk.Label(self.Frame1)
        self.fra46_lab49.place(relx=0.471, rely=0.016, height=34, width=82)
        self.fra46_lab49.configure(activebackground="#f9f9f9")
        self.fra46_lab49.configure(activeforeground="black")
        self.fra46_lab49.configure(background="#d9d9d9")
        self.fra46_lab49.configure(disabledforeground="#a3a3a3")
        self.fra46_lab49.configure(font="-family {Segoe UI} -size 13 -weight normal -slant roman -underline 0 -overstrike 0")
        self.fra46_lab49.configure(foreground="#000000")
        self.fra46_lab49.configure(highlightbackground="#004040")
        self.fra46_lab49.configure(highlightcolor="black")
        self.fra46_lab49.configure(text='''Mobile #''')

        self.txtmobileno = tk.Text(self.Frame1)
        self.txtmobileno.place(relx=0.571, rely=0.016, relheight=0.065
                , relwidth=0.351)
        self.txtmobileno.configure(background="white")
        self.txtmobileno.configure(font="-family {Segoe UI} -size 13")
        self.txtmobileno.configure(foreground="black")
        self.txtmobileno.configure(highlightbackground="#d9d9d9")
        self.txtmobileno.configure(highlightcolor="black")
        self.txtmobileno.configure(insertbackground="black")
        self.txtmobileno.configure(selectbackground="blue")
        self.txtmobileno.configure(selectforeground="white")
        self.txtmobileno.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.txtmobileno_tooltip = \
        ToolTip(self.txtmobileno, self.tooltip_font, '''Enter mobile Number''')

        self.btnfind = tk.Button(self.Frame1)
        self.btnfind.place(relx=0.931, rely=0.016, height=34, width=47)
        self.btnfind.configure(activebackground="#ececec")
        self.btnfind.configure(activeforeground="#000000")
        self.btnfind.configure(background="#d9d9d9")
        self.btnfind.configure(disabledforeground="#a3a3a3")
        self.btnfind.configure(foreground="#000000")
        self.btnfind.configure(highlightbackground="#d9d9d9")
        self.btnfind.configure(highlightcolor="black")
        self.btnfind.configure(pady="0")
        self.btnfind.configure(text='''Find''')
        self.tooltip_font = "TkDefaultFont"
        self.btnfind_tooltip = \
        ToolTip(self.btnfind, self.tooltip_font, '''Click to find vehicle info''')

        self.findvehicle = tk.Frame(self.Frame1)
        self.findvehicle.place(relx=0.0, rely=0.096, relheight=0.074
                , relwidth=1.0)
        self.findvehicle.configure(relief='groove')
        self.findvehicle.configure(borderwidth="2")
        self.findvehicle.configure(relief="groove")
        self.findvehicle.configure(background="#d9d9d9")
        self.findvehicle.configure(highlightbackground="#d9d9d9")
        self.findvehicle.configure(highlightcolor="black")

        self.btnmodifybill = ttk.Button(self.findvehicle)
        self.btnmodifybill.place(relx=0.24, rely=0.2, height=25, width=166)
        self.btnmodifybill.configure(takefocus="")
        self.btnmodifybill.configure(text='''Modify Bill''')

        self.lblbillno = tk.Label(self.findvehicle)
        self.lblbillno.place(relx=0.459, rely=0.2, height=19, width=82)
        self.lblbillno.configure(activebackground="#f9f9f9")
        self.lblbillno.configure(activeforeground="black")
        self.lblbillno.configure(background="#d9d9d9")
        self.lblbillno.configure(disabledforeground="#a3a3a3")
        self.lblbillno.configure(font="-family {Segoe UI} -size 12 -weight normal -slant roman -underline 0 -overstrike 0")
        self.lblbillno.configure(foreground="#000000")
        self.lblbillno.configure(highlightbackground="#004040")
        self.lblbillno.configure(highlightcolor="black")
        self.lblbillno.configure(text='''Bill #''')

        self.txtbillno = tk.Label(self.findvehicle)
        self.txtbillno.place(relx=0.583, rely=0.2, height=23, width=279)
        self.txtbillno.configure(activebackground="#f9f9f9")
        self.txtbillno.configure(activeforeground="black")
        self.txtbillno.configure(background="#d9d9d9")
        self.txtbillno.configure(disabledforeground="#a3a3a3")
        self.txtbillno.configure(font="-family {Segoe UI} -size 13 -weight normal -slant roman -underline 0 -overstrike 0")
        self.txtbillno.configure(foreground="#000000")
        self.txtbillno.configure(highlightbackground="#004040")
        self.txtbillno.configure(highlightcolor="black")
        self.txtbillno.configure(text='''Bill Number''')

        self.btnnewbill = ttk.Button(self.Frame1)
        self.btnnewbill.place(relx=0.025, rely=0.111, height=25, width=166)
        self.btnnewbill.configure(takefocus="")
        self.btnnewbill.configure(text='''New Bill''')

        self.Frame2 = tk.Frame(self.Frame1)
        self.Frame2.place(relx=0.0, rely=0.163, relheight=0.172, relwidth=1.0)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Frame2)
        self.Label1.place(relx=0.012, rely=0.069, height=16, width=107)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 10 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Customer Name''')

        self.txtcustomerno = tk.Text(self.Frame2)
        self.txtcustomerno.place(relx=0.149, rely=0.069, relheight=0.164
                , relwidth=0.515)
        self.txtcustomerno.configure(background="white")
        self.txtcustomerno.configure(font="-family {Segoe UI} -size 10")
        self.txtcustomerno.configure(foreground="black")
        self.txtcustomerno.configure(highlightbackground="#d9d9d9")
        self.txtcustomerno.configure(highlightcolor="black")
        self.txtcustomerno.configure(insertbackground="black")
        self.txtcustomerno.configure(selectbackground="blue")
        self.txtcustomerno.configure(selectforeground="white")
        self.txtcustomerno.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.txtcustomerno_tooltip = \
        ToolTip(self.txtcustomerno, self.tooltip_font, '''Enter customer name''')

        self.Label1_6 = tk.Label(self.Frame2)
        self.Label1_6.place(relx=0.012, rely=0.276, height=16, width=107)
        self.Label1_6.configure(activebackground="#f9f9f9")
        self.Label1_6.configure(activeforeground="black")
        self.Label1_6.configure(background="#d9d9d9")
        self.Label1_6.configure(disabledforeground="#a3a3a3")
        self.Label1_6.configure(font="-family {Segoe UI} -size 10 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label1_6.configure(foreground="#000000")
        self.Label1_6.configure(highlightbackground="#d9d9d9")
        self.Label1_6.configure(highlightcolor="black")
        self.Label1_6.configure(text='''Address''')

        self.txtaddress = tk.Text(self.Frame2)
        self.txtaddress.place(relx=0.149, rely=0.259, relheight=0.319
                , relwidth=0.515)
        self.txtaddress.configure(background="white")
        self.txtaddress.configure(font="-family {Segoe UI} -size 10")
        self.txtaddress.configure(foreground="black")
        self.txtaddress.configure(highlightbackground="#d9d9d9")
        self.txtaddress.configure(highlightcolor="black")
        self.txtaddress.configure(insertbackground="black")
        self.txtaddress.configure(selectbackground="blue")
        self.txtaddress.configure(selectforeground="white")
        self.txtaddress.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.txtaddress_tooltip = \
        ToolTip(self.txtaddress, self.tooltip_font, '''Enter customer address''')

        self.Label1_7 = tk.Label(self.Frame2)
        self.Label1_7.place(relx=0.012, rely=0.526, height=17, width=107)
        self.Label1_7.configure(activebackground="#f9f9f9")
        self.Label1_7.configure(activeforeground="black")
        self.Label1_7.configure(background="#d9d9d9")
        self.Label1_7.configure(disabledforeground="#a3a3a3")
        self.Label1_7.configure(font="-family {Segoe UI} -size 10 -weight normal -slant roman -underline 0 -overstrike 0")
        self.Label1_7.configure(foreground="#000000")
        self.Label1_7.configure(highlightbackground="#d9d9d9")
        self.Label1_7.configure(highlightcolor="black")
        self.Label1_7.configure(text='''Vehicle Info''')

        self.txtvehicleinfo = tk.Text(self.Frame2)
        self.txtvehicleinfo.place(relx=0.149, rely=0.595, relheight=0.233
                , relwidth=0.515)
        self.txtvehicleinfo.configure(background="white")
        self.txtvehicleinfo.configure(font="-family {Segoe UI} -size 10")
        self.txtvehicleinfo.configure(foreground="black")
        self.txtvehicleinfo.configure(highlightbackground="#d9d9d9")
        self.txtvehicleinfo.configure(highlightcolor="black")
        self.txtvehicleinfo.configure(insertbackground="black")
        self.txtvehicleinfo.configure(selectbackground="blue")
        self.txtvehicleinfo.configure(selectforeground="white")
        self.txtvehicleinfo.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.txtvehicleinfo_tooltip = \
        ToolTip(self.txtvehicleinfo, self.tooltip_font, '''Vehicle Information''')

        self.Label2 = tk.Label(self.Frame1)
        self.Label2.place(relx=-0.048, rely=0.341, height=21, width=37)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''SlNo''')

        self.Label2_9 = tk.Label(self.Frame1)
        self.Label2_9.place(relx=0.313, rely=0.341, height=21, width=149)
        self.Label2_9.configure(activebackground="#f9f9f9")
        self.Label2_9.configure(activeforeground="black")
        self.Label2_9.configure(background="#d9d9d9")
        self.Label2_9.configure(disabledforeground="#a3a3a3")
        self.Label2_9.configure(foreground="#000000")
        self.Label2_9.configure(highlightbackground="#d9d9d9")
        self.Label2_9.configure(highlightcolor="black")
        self.Label2_9.configure(text='''Item Name''')

        self.Label2_10 = tk.Label(self.Frame1)
        self.Label2_10.place(relx=0.562, rely=0.341, height=21, width=56)
        self.Label2_10.configure(activebackground="#f9f9f9")
        self.Label2_10.configure(activeforeground="black")
        self.Label2_10.configure(background="#d9d9d9")
        self.Label2_10.configure(disabledforeground="#a3a3a3")
        self.Label2_10.configure(foreground="#000000")
        self.Label2_10.configure(highlightbackground="#d9d9d9")
        self.Label2_10.configure(highlightcolor="black")
        self.Label2_10.configure(text='''UOM''')

        self.Label2_11 = tk.Label(self.Frame1)
        self.Label2_11.place(relx=0.643, rely=0.341, height=21, width=56)
        self.Label2_11.configure(activebackground="#f9f9f9")
        self.Label2_11.configure(activeforeground="black")
        self.Label2_11.configure(background="#d9d9d9")
        self.Label2_11.configure(disabledforeground="#a3a3a3")
        self.Label2_11.configure(foreground="#000000")
        self.Label2_11.configure(highlightbackground="#d9d9d9")
        self.Label2_11.configure(highlightcolor="black")
        self.Label2_11.configure(text='''Qty''')

        self.Label2_12 = tk.Label(self.Frame1)
        self.Label2_12.place(relx=0.728, rely=0.341, height=21, width=56)
        self.Label2_12.configure(activebackground="#f9f9f9")
        self.Label2_12.configure(activeforeground="black")
        self.Label2_12.configure(background="#d9d9d9")
        self.Label2_12.configure(disabledforeground="#a3a3a3")
        self.Label2_12.configure(foreground="#000000")
        self.Label2_12.configure(highlightbackground="#d9d9d9")
        self.Label2_12.configure(highlightcolor="black")
        self.Label2_12.configure(text='''Price''')

        self.Label2_13 = tk.Label(self.Frame1)
        self.Label2_13.place(relx=0.805, rely=0.341, height=21, width=56)
        self.Label2_13.configure(activebackground="#f9f9f9")
        self.Label2_13.configure(activeforeground="black")
        self.Label2_13.configure(background="#d9d9d9")
        self.Label2_13.configure(disabledforeground="#a3a3a3")
        self.Label2_13.configure(foreground="#000000")
        self.Label2_13.configure(highlightbackground="#d9d9d9")
        self.Label2_13.configure(highlightcolor="black")
        self.Label2_13.configure(text='''Total''')

        self.cboitemname = ttk.Combobox(self.Frame1)
        self.cboitemname.place(relx=0.253, rely=0.392, relheight=0.034
                , relwidth=0.309)
        self.cboitemname.configure(textvariable=psv_support.varcboitemname)
        self.cboitemname.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.cboitemname_tooltip = \
        ToolTip(self.cboitemname, self.tooltip_font, '''Select / Enter  item''')

        self.txtqty = tk.Text(self.Frame1)
        self.txtqty.place(relx=0.654, rely=0.39, relheight=0.031, relwidth=0.067)

        self.txtqty.configure(background="white")
        self.txtqty.configure(font="TkTextFont")
        self.txtqty.configure(foreground="black")
        self.txtqty.configure(highlightbackground="#d9d9d9")
        self.txtqty.configure(highlightcolor="black")
        self.txtqty.configure(insertbackground="black")
        self.txtqty.configure(selectbackground="blue")
        self.txtqty.configure(selectforeground="white")
        self.txtqty.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.txtqty_tooltip = \
        ToolTip(self.txtqty, self.tooltip_font, '''Enter item Quantity''')

        self.txtprice = tk.Text(self.Frame1)
        self.txtprice.place(relx=0.728, rely=0.389, relheight=0.034
                , relwidth=0.068)
        self.txtprice.configure(background="white")
        self.txtprice.configure(font="TkTextFont")
        self.txtprice.configure(foreground="black")
        self.txtprice.configure(highlightbackground="#d9d9d9")
        self.txtprice.configure(highlightcolor="black")
        self.txtprice.configure(insertbackground="black")
        self.txtprice.configure(selectbackground="blue")
        self.txtprice.configure(selectforeground="white")
        self.txtprice.configure(wrap="word")
        self.tooltip_font = "TkDefaultFont"
        self.txtprice_tooltip = \
        ToolTip(self.txtprice, self.tooltip_font, '''Price''')

        self.txttotal = tk.Text(self.Frame1)
        self.txttotal.place(relx=0.805, rely=0.389, relheight=0.034
                , relwidth=0.073)
        self.txttotal.configure(background="white")
        self.txttotal.configure(font="TkTextFont")
        self.txttotal.configure(foreground="black")
        self.txttotal.configure(highlightbackground="#d9d9d9")
        self.txttotal.configure(highlightcolor="black")
        self.txttotal.configure(insertbackground="black")
        self.txttotal.configure(selectbackground="blue")
        self.txttotal.configure(selectforeground="white")
        self.txttotal.configure(wrap="word")

        self.cbouom = ttk.Combobox(self.Frame1)
        self.cbouom.place(relx=0.564, rely=0.392, relheight=0.034
                , relwidth=0.079)
        self.cbouom.configure(textvariable=psv_support.varcbouom)
        self.cbouom.configure(takefocus="")
        self.tooltip_font = "TkDefaultFont"
        self.cbouom_tooltip = \
        ToolTip(self.cbouom, self.tooltip_font, '''Select UOM''')

        self.btnadditem = tk.Button(self.Frame1)
        self.btnadditem.place(relx=0.885, rely=0.384, height=24, width=27)
        self.btnadditem.configure(activebackground="#ececec")
        self.btnadditem.configure(activeforeground="#000000")
        self.btnadditem.configure(background="#d9d9d9")
        self.btnadditem.configure(disabledforeground="#a3a3a3")
        self.btnadditem.configure(font="-family {Segoe UI} -size 13 -weight bold -slant roman -underline 0 -overstrike 0")
        self.btnadditem.configure(foreground="#000000")
        self.btnadditem.configure(highlightbackground="#d9d9d9")
        self.btnadditem.configure(highlightcolor="black")
        self.btnadditem.configure(pady="0")
        self.btnadditem.configure(text='''+''')
        self.tooltip_font = "TkDefaultFont"
        self.btnadditem_tooltip = \
        ToolTip(self.btnadditem, self.tooltip_font, '''Add Item''')

        self.style.configure('Treeview',  font="TkDefaultFont")
        self.Scrolledtreeview1 = ScrolledTreeView(self.Frame1)
        self.Scrolledtreeview1.place(relx=0.0, rely=0.43, relheight=0.426
                , relwidth=0.994)
        self.Scrolledtreeview1.configure(columns="Col1")
        # build_treeview_support starting.
        self.Scrolledtreeview1.heading("#0",text="Tree")
        self.Scrolledtreeview1.heading("#0",anchor="center")
        self.Scrolledtreeview1.column("#0",width="405")
        self.Scrolledtreeview1.column("#0",minwidth="20")
        self.Scrolledtreeview1.column("#0",stretch="1")
        self.Scrolledtreeview1.column("#0",anchor="w")
        self.Scrolledtreeview1.heading("Col1",text="Col1")
        self.Scrolledtreeview1.heading("Col1",anchor="center")
        self.Scrolledtreeview1.column("Col1",width="406")
        self.Scrolledtreeview1.column("Col1",minwidth="20")
        self.Scrolledtreeview1.column("Col1",stretch="1")
        self.Scrolledtreeview1.column("Col1",anchor="w")

        self.Label3 = tk.Label(self.Frame1)
        self.Label3.place(relx=0.005, rely=0.341, height=21, width=31)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''SlNo''')

        self.lblitemslno = tk.Label(self.Frame1)
        self.lblitemslno.place(relx=0.002, rely=0.39, height=21, width=35)
        self.lblitemslno.configure(activebackground="#f9f9f9")
        self.lblitemslno.configure(activeforeground="black")
        self.lblitemslno.configure(background="#d9d9d9")
        self.lblitemslno.configure(disabledforeground="#a3a3a3")
        self.lblitemslno.configure(foreground="#000000")
        self.lblitemslno.configure(highlightbackground="#d9d9d9")
        self.lblitemslno.configure(highlightcolor="black")
        self.lblitemslno.configure(text='''SlNo''')

        self.txtitemno = tk.Text(self.Frame1)
        self.txtitemno.place(relx=0.046, rely=0.393, relheight=0.031
                , relwidth=0.079)
        self.txtitemno.configure(background="#c0c0c0")
        self.txtitemno.configure(font="TkTextFont")
        self.txtitemno.configure(foreground="black")
        self.txtitemno.configure(highlightbackground="#d9d9d9")
        self.txtitemno.configure(highlightcolor="#c0c0c0")
        self.txtitemno.configure(insertbackground="black")
        self.txtitemno.configure(selectbackground="blue")
        self.txtitemno.configure(selectforeground="white")
        self.txtitemno.configure(state='disabled')
        self.txtitemno.configure(wrap="word")

        self.Label5 = tk.Label(self.Frame1)
        self.Label5.place(relx=0.048, rely=0.341, height=21, width=54)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''ItemNo''')

        self.Frame3 = tk.Frame(self.Frame1)
        self.Frame3.place(relx=0.0, rely=0.861, relheight=0.083, relwidth=1.0)
        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#d9d9d9")
        self.Frame3.configure(highlightbackground="#d9d9d9")
        self.Frame3.configure(highlightcolor="black")

        self.btnsave = tk.Button(self.Frame3)
        self.btnsave.place(relx=0.024, rely=0.179, height=34, width=97)
        self.btnsave.configure(activebackground="#ececec")
        self.btnsave.configure(activeforeground="#000000")
        self.btnsave.configure(background="#d9d9d9")
        self.btnsave.configure(disabledforeground="#a3a3a3")
        self.btnsave.configure(font="-family {Segoe UI} -size 10 -weight bold -slant roman -underline 0 -overstrike 0")
        self.btnsave.configure(foreground="#000000")
        self.btnsave.configure(highlightbackground="#d9d9d9")
        self.btnsave.configure(highlightcolor="black")
        self.btnsave.configure(pady="0")
        self.btnsave.configure(text='''Save Invoice''')

        self.btnprint = tk.Button(self.Frame3)
        self.btnprint.place(relx=0.802, rely=0.179, height=34, width=107)
        self.btnprint.configure(activebackground="#ececec")
        self.btnprint.configure(activeforeground="#000000")
        self.btnprint.configure(background="#d9d9d9")
        self.btnprint.configure(disabledforeground="#a3a3a3")
        self.btnprint.configure(font="-family {Segoe UI} -size 10 -weight bold -slant roman -underline 0 -overstrike 0")
        self.btnprint.configure(foreground="#000000")
        self.btnprint.configure(highlightbackground="#d9d9d9")
        self.btnprint.configure(highlightcolor="black")
        self.btnprint.configure(pady="0")
        self.btnprint.configure(text='''Print Invoice''')

        self.btnclear = tk.Button(self.Frame1)
        self.btnclear.place(relx=0.919, rely=0.384, height=24, width=27)
        self.btnclear.configure(activebackground="#ececec")
        self.btnclear.configure(activeforeground="#000000")
        self.btnclear.configure(background="#d9d9d9")
        self.btnclear.configure(disabledforeground="#a3a3a3")
        self.btnclear.configure(font="-family {Segoe UI} -size 10 -weight bold -slant roman -underline 0 -overstrike 0")
        self.btnclear.configure(foreground="#000000")
        self.btnclear.configure(highlightbackground="#d9d9d9")
        self.btnclear.configure(highlightcolor="black")
        self.btnclear.configure(pady="0")
        self.btnclear.configure(text='''-''')
        self.tooltip_font = "TkDefaultFont"
        self.btnclear_tooltip = \
        ToolTip(self.btnclear, self.tooltip_font, '''Clear''')

        self.cboitemtype = ttk.Combobox(self.Frame1)
        self.cboitemtype.place(relx=0.132, rely=0.392, relheight=0.034
                , relwidth=0.111)
        self.value_list = ['Spare_Parts,','Service',]
        self.cboitemtype.configure(values=self.value_list)
        self.cboitemtype.configure(state='readonly')
        self.cboitemtype.configure(textvariable=psv_support.varcboitemtype)
        self.cboitemtype.configure(takefocus="")

        self.lblType = tk.Label(self.Frame1)
        self.lblType.place(relx=0.14, rely=0.343, height=21, width=74)
        self.lblType.configure(background="#d9d9d9")
        self.lblType.configure(disabledforeground="#a3a3a3")
        self.lblType.configure(foreground="#000000")
        self.lblType.configure(text='''Type''')

        self.btndelete = tk.Button(self.Frame1)
        self.btndelete.place(relx=0.952, rely=0.383, height=24, width=27)
        self.btndelete.configure(activebackground="#ececec")
        self.btndelete.configure(activeforeground="#000000")
        self.btndelete.configure(background="#d9d9d9")
        self.btndelete.configure(disabledforeground="#a3a3a3")
        self.btndelete.configure(foreground="#000000")
        self.btndelete.configure(highlightbackground="#d9d9d9")
        self.btndelete.configure(highlightcolor="black")
        self.btndelete.configure(pady="0")
        self.btndelete.configure(text='''DEL''')
        self.tooltip_font = "TkDefaultFont"
        self.btndelete_tooltip = \
        ToolTip(self.btndelete, self.tooltip_font, '''Delete Item''')

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





